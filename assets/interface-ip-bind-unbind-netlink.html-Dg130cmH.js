import{_ as h}from"./plugin-vue_export-helper-DlAUqK2U.js";import{a as k,h as s,b as r,g as a,e,f as p,r as n,o as d}from"./app-dowPD55j.js";const o={};function c(g,i){const t=n("RouteLink"),l=n("CaptionedImage");return d(),k("div",null,[i[3]||(i[3]=s('<h1 id="ip-bind-unbind-on-network-interface-using-netlink" tabindex="-1"><a class="header-anchor" href="#ip-bind-unbind-on-network-interface-using-netlink"><span>IP bind/unbind on network interface using netlink</span></a></h1><h2 id="ip-address" tabindex="-1"><a class="header-anchor" href="#ip-address"><span>IP Address</span></a></h2><p>Internet Protocol (IP) addresses are essential, acting as unique identifiers for devices connected to a network. Think of them like postal addresses for the digital world, ensuring data is sent to the correct destination. Without IP addresses, devices couldn&#39;t find each other, making activities like sharing data, replication difficult.</p><h2 id="virtual-ip-address" tabindex="-1"><a class="header-anchor" href="#virtual-ip-address"><span>Virtual IP Address</span></a></h2><p>In most distributed systems, people use a concept of virtual ip (VIP) where the application makes the call to virtual ip and the machine that bounds the virtual ip receives the data. Why is this important? Why can&#39;t we just send data to the respective machine?</p><p><strong>Machine IPs are fragile</strong>: If a machine fails (disk crash, etc.), its IP goes down. Apps would need complex logic to find and switch to a new machine&#39;s IP. This logic must be repeated across all applications.</p><p>For the same case, If we use a virtual IP, the virtual IP shall instantly move on to the next available machine, making zero code change on the application and high availability.</p><h2 id="split-brain-when-vips-go-wrong" tabindex="-1"><a class="header-anchor" href="#split-brain-when-vips-go-wrong"><span>Split brain: When VIPs Go Wrong</span></a></h2><p>Ok! VIP is awesome, but that brings it own set of problems. What happens if one VIP is bound to multiple machines? This is called <strong>split-brain</strong> where the data will be written to multiple destinations instead of a single one. The destination is decided based on the <strong>ARP cache</strong> of the machine. ARP caches are updated periodically making it harder to identify which data went where leading to eternal chaos.</p><p>To mitigate this risk, we need to monitor VIP bind and unbind events across machines to proactively detect any split-brain conditions. While robust failover mechanisms should ideally prevent these situations, it&#39;s crucial to identify and address them early to avoid data inconsistency. Lets dive into the implementation!</p><h2 id="netlink" tabindex="-1"><a class="header-anchor" href="#netlink"><span>Netlink</span></a></h2><p>Netlink is a powerful communication mechanism in the Linux kernel that allows interaction between the kernel and user-space applications. Originally introduced as a replacement for the traditional ioctl system calls, Netlink provides a more flexible, efficient, and extensible interface for exchanging messages between these two layers.</p>',12)),r("p",null,[i[1]||(i[1]=a("Netlink is implemented as a socket-based IPC (Inter-Process Communication) mechanism and is widely used in networking, system monitoring, and kernel configuration tasks. For those new to netlink, this ")),e(t,{to:"/blog/interface-flap-netlink.html#netlink"},{default:p(()=>i[0]||(i[0]=[a("blog post")])),_:1}),i[2]||(i[2]=a(" offers a quick/concise introduction. I highly recommend reviewing it if youâ€™re encountering netlink for the first time."))]),i[4]||(i[4]=s(`<h3 id="implementation" tabindex="-1"><a class="header-anchor" href="#implementation"><span>Implementation</span></a></h3><p>As referred in the other blog, we will be using <code>python</code> for listening to netlink events.</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># </span><span style="--shiki-light:#A626A4;--shiki-light-font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic;">NOTE</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">: The values of RTM_* are defined in rtnetlink.h</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Create a netlink socket</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">sock </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> socket.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">socket</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(socket.</span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">AF_NETLINK</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, socket.</span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">SOCK_RAW</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">NETLINK_ROUTE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Bind the socket to the desired group to get the notification</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">sock.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">bind</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">((</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">RTM_NEWADDR</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> |</span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;"> RTM_DELADDR</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Once bound, we can start to receive the message and parse it. As said in the other blog, netlink messages have a structured format. (refer below)</p>`,4)),e(l,{src:"/images/blog/interface-flap-netlink/msg_structure.png",caption:"Netlink message structure"}),i[5]||(i[5]=s(`<p>The first 32bit (4bytes) represents the message length followed by the type <code>RTM_*</code> link (16bit). In our case, it will be either <code>RTM_NEWADDR</code> or <code>RTM_DELADDR</code>. We will use python <a href="https://docs.python.org/3/library/struct.html" target="_blank" rel="noopener noreferrer">struct</a> package to parse the netlink message. A quick refresh on the <a href="https://docs.python.org/3/library/struct.html#format-characters" target="_blank" rel="noopener noreferrer">format characters</a>.</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="parser.py" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">nlmsg_len, nlmsg_type, flags </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> struct.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">unpack</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;IHH&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, data[:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">8</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">])</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># sequence numbers = 4bytes, port = 4bytes.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># We read the length, type, flags from the first 8 bytes.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Remaining is the payload.</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">payload </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> data[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">16</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If the message type is of <code>RTM_NEWADDR</code>, a new IP is bound to an interface. else, a IP is unbound from an interface. The message received will have the below <code>struct ifaddrmsg</code> header.</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">struct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ifaddrmsg {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    __u8        ifa_family;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    __u8        ifa_prefixlen;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  /* The prefix length        */</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    __u8        ifa_flags;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  /* Flags            */</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    __u8        ifa_scope;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  /* Address scope        */</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    __u32       ifa_index;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  /* Link index           */</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We will parse the header using the <code>struct.unpack</code> method, followed by parsing the payload using the <code>parse_attributes</code> method used in the other blog.</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="parser.py" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">ifa_family, ifa_prefixlen, ifa_flags, ifa_scope, ifa_index </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> struct.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">unpack</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;BBBBI&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, payload[:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">8</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">])</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">attrs </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> parse_attributes</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(payload[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">8</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:])  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># first 8 bytes is message header.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>parse_attributes</code> method returns a <code>dict</code> containing the details such as,</p><ol><li>Address</li><li>Local</li><li>Interface</li><li>Netmask</li></ol><p>We will represent this in a value-object class for easier understanding.</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> IFA</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">    ADDRESS</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">    LOCAL</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">    INTERFACE</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 3</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">    NETMASK</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 4</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="parser.py" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># parser.py contd.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">event_type </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;IP bind&quot;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> nlmsg_type </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;"> RTM_NEWADDR</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> else</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;IP Unbind&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">ip_addr </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> socket.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">inet_ntoa</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(attrs[</span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">IFA</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">ADDRESS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">])</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">interface </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> attrs[</span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">IFA</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">INTERFACE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">].</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">decode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;utf-8&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">netmask </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> socket.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">inet_ntoa</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(attrs[</span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">IFA</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">NETMASK</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">])</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">f</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">{</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">event_type</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> on </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">{</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">interface</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> with IP [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">{</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">ip_addr</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">] and netmask [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">{</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">netmask</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">]&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Commands to simulate IP bind/unbind:</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># To bind the IP</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ifconfig</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> wlp0s20f3:ip</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 192.168.1.230</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> netmask</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 255.255.255.0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># To unbind the IP</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ifconfig</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> wlp0s20f3:ip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> down</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Sample output:</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> python3</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> monitor_ip_events.py</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Listening</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> for</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> IP</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> bind/unbind</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> events...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">IP</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> bind</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> on</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> wlp0s20f3:ip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> with</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> IP</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [192.168.1.230] and netmask [192.168.1.255]</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">IP</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Unbind</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> on</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> wlp0s20f3:ip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> with</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ip</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [192.168.1.230] and netmask [192.168.1.255]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Thank you for reading! See you in the next post.</p>`,16))])}const u=h(o,[["render",c],["__file","interface-ip-bind-unbind-netlink.html.vue"]]),m=JSON.parse('{"path":"/blog/interface-ip-bind-unbind-netlink.html","title":"Identifying IP bind/unbind on network interface using netlink","lang":"en-US","frontmatter":{"title":"Identifying IP bind/unbind on network interface using netlink","description":"A detailed explanation on how to identify IP bind/unbind using netlink","lang":"en-US","date":"2025-02-08T00:00:00.000Z","category":["linux"],"tag":["netlink","python"],"head":[["meta",{"name":"keywords","content":"interface bind netlink research linux unbind"}],["meta",{"property":"og:url","content":"https://syogaraj.github.io/blog/interface-ip-bind-unbind-netlink.html"}],["meta",{"property":"og:site_name","content":"Yogaraj.S"}],["meta",{"property":"og:title","content":"Identifying IP bind/unbind on network interface using netlink"}],["meta",{"property":"og:description","content":"A detailed explanation on how to identify IP bind/unbind using netlink"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-02-09T07:34:33.000Z"}],["meta",{"property":"article:tag","content":"netlink"}],["meta",{"property":"article:tag","content":"python"}],["meta",{"property":"article:published_time","content":"2025-02-08T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-09T07:34:33.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Identifying IP bind/unbind on network interface using netlink\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-02-08T00:00:00.000Z\\",\\"dateModified\\":\\"2025-02-09T07:34:33.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Yogaraj. S\\",\\"email\\":\\"yogarajsivaprakasam@gmail.com\\"}]}"]],"star":true,"excerpt":"Internet Protocol (IP) addresses are essential, acting as unique identifiers for devices connected to a network. But, if a single IP binds to multiple machines, it can trigger a split-brain scenario. This means data is routed to multiple destinations making it hard to track data flow. Proactive monitoring of VIP bind unbind events is essential to detect and prevent such issues."},"headers":[{"level":2,"title":"IP Address","slug":"ip-address","link":"#ip-address","children":[]},{"level":2,"title":"Virtual IP Address","slug":"virtual-ip-address","link":"#virtual-ip-address","children":[]},{"level":2,"title":"Split brain: When VIPs Go Wrong","slug":"split-brain-when-vips-go-wrong","link":"#split-brain-when-vips-go-wrong","children":[]},{"level":2,"title":"Netlink","slug":"netlink","link":"#netlink","children":[{"level":3,"title":"Implementation","slug":"implementation","link":"#implementation","children":[]}]}],"git":{"createdTime":1739086473000,"updatedTime":1739086473000,"contributors":[{"name":"yogaraj.s","username":"yogaraj.s","email":"yogarajsivaprakasam@gmail.com","commits":1,"url":"https://github.com/yogaraj.s"}]},"readingTime":{"minutes":3.14,"words":943},"filePathRelative":"blog/interface-ip-bind-unbind-netlink.md","localizedDate":"February 8, 2025"}');export{u as comp,m as data};
